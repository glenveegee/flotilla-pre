#!/bin/bash

: <<'DISCLAIMER'

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.

This script is licensed under the terms of the MIT license.
Unless otherwise noted, code reproduced herein
was written for this script.

- The Pimoroni Crew -

DISCLAIMER

pathoverride="no"
dfubinpath="./dfu-programmer"
dockhexpath="./flotilla-dock.hex"
docktool="./firmware-version"
firmwarev=$(cat ./flotilla-dock.txt)

success() {
    echo "$(tput setaf 2)$1$(tput sgr0)"
}

warning() {
    echo "$(tput setaf 1)$1$(tput sgr0)"
}

newline() {
    echo ""
}

confirm() {
    if [ "$FORCE" == '-y' ]; then
        true
    else
        read -r -p "$1 [y/N] " response < /dev/tty
        if [[ $response =~ ^(yes|y|Y)$ ]]; then
            true
        else
            false
        fi
    fi
}

sudocheck() {
    if [ $(id -u) -ne 0 ]; then
        echo -e "Install must be run as root. Try 'sudo ./$scriptname'\n"
        exit
    fi
}

os_check() {
    IS_RASPBIAN=false
    IS_MACOSX=false
    IS_X86_64=false
    IS_X86_32=false

    if [ -f /etc/os-release ] && cat /etc/os-release | grep "Raspbian" > /dev/null; then
        IS_RASPBIAN=true
    elif uname -s | grep "Darwin" > /dev/null; then
        IS_MACOSX=true
    elif uname -m | grep "x86_64" > /dev/null; then
        IS_X86_64=true
    else
        IS_X86_32=true
    fi
}

os_check
sudocheck

if [ $pathoverride == "yes" ]; then
    if $IS_RASPBIAN; then
        dfubinpath="./raspi/dfu-programmer"
    elif $IS_MACOSX; then
        dfubinpath="./macosx/dfu-programmer"
    elif $IS_X86_64; then
        dfubinpath="./linux/dfu-programmer-amd64"
    else
        dfubinpath="./linux/dfu-programmer-i386"
    fi
fi

newline
echo "Flotilla Firmware Updater"

if [ -f $dockhexpath ] || [ -L $dockhexpath ]; then
    echo "dock firmware file found"
    newline
else
    warning "No flotilla-dock.hex file found. Exiting!"
    newline
    exit
fi

# check if dock is plugged in

if command -v lsusb > /dev/null; then

    RESULT=$(lsusb -d 16d0:08c3)

    if [ -z "$RESULT" ]; then
        echo "Plug in your Flotilla Dock now."
    fi

    while ! lsusb -d 16d0:08c3; do
        pause=$(($pause++))
        if [ $pause = 10 ]; then
            break
        fi
        sleep 1
    done

elif command -v ioreg > /dev/null; then

    pause=0
    HEXDOCK=$(ioreg | grep "Flotilla Dock")

    if [ -z "$HEXDOCK" ]; then
        echo "Plug in your Flotilla Dock now."
    fi

    while [ -z "$HEXDOCK" ]; do
        HEXDOCK=$(ioreg | grep "Flotilla Dock")
        pause=$(($pause+1))
        if [ $pause = 10 ]; then
            break
        fi
        sleep 1
    done
fi

# check if dock firmware is current

echo "Reading current firmware version..."
sleep 1

if [ -f "$docktool.py" ]; then
    if python -c "import flotilla" 2>&1 >/dev/null | grep "No module named flotilla"; then
        pythonapi=false
        echo "The flotilla Python API is not installed"
        echo "Dock current version unknown"
    else    
        pythonapi=true
        firmwared=$($docktool | grep "Version" | rev | cut -c 1-4 | rev )
        echo "Version: $firmwared"
    fi
elif [ -f "$docktool" ]; then
    firmwared=$($docktool | grep "Version" | rev | cut -c 1-4 | rev )
    echo "Version: $firmwared"
else
    echo "no version checker tool found"
fi

if  $pythonapi; then
    if [ -z "$firmwared" ]; then
        echo "Your dock's firmware version could not be determined"
        read -rsp $'Press any key to continue...\n' -n1 key
    elif [[ "$firmwared" < "$firmwarev" ]]; then
        echo "Your dock firmware needs to be updated!"
        read -rsp $'Press any key to continue...\n' -n1 key
    else
        newline
        echo "Your dock is already flashed with the latest firmware"
        if ! confirm "Would you like to reflash it anyway?"; then
            exit 1
        fi
    fi
fi

# flashing dock firmware

echo "Flashing dock firmware..."

if command -v lsusb > /dev/null; then

    RESULT=$(lsusb -d 16d0:08c3)

    if [ ! -z "$RESULT" ]; then
        warning "Please unplug your Flotilla Dock!"
        while [ ! -z "$RESULT" ]; do
            RESULT=$(lsusb -d 16d0:08c3)
            sleep 0.01
        done
    fi

    newline
    success "Plug in your Flotilla Dock now."
    echo "Updating should continue automatically."
    newline

    while ! lsusb -d 03eb:2fe4; do
        sleep 0.01
    done

    sleep 0.2

    sudo $dfubinpath atxmega32a4u erase
    sudo $dfubinpath atxmega32a4u flash $dockhexpath

elif command -v ioreg > /dev/null; then

    HEXDOCK=$(ioreg | grep "Flotilla Dock")
    DFUDOCK=$(ioreg | grep "Flotilla DFU")

    if [ ! -z "$HEXDOCK" ]; then
        warning "Please unplug your Flotilla Dock!"
    fi

    while [ ! -z "$HEXDOCK" ]; do
        HEXDOCK=$(ioreg | grep "Flotilla Dock")
        sleep 0.01
    done

    newline
    success "Plug in your Flotilla Dock now."
    echo "Updating should continue automatically."
    newline

    while [ -z "$DFUDOCK" ]; do
        DFUDOCK=$(ioreg | grep "Flotilla DFU")
        sleep 0.01
    done

    sleep 0.2

    sudo $dfubinpath atxmega32a4u erase
    sudo $dfubinpath atxmega32a4u flash $dockhexpath
else
    warning "Please unplug your Flotilla Dock if it is plugged in!"
    sudo sleep 2
    newline
    success "Plug in your Flotilla Dock now."
    read -rsp $'Press any key to continue...\n' -n1 key
    newline

    if sudo $dfubinpath atxmega32a4u erase 2>&1 | grep -q "no device present"; then
        warning "No Flotilla Dock detected!"
        exit
    fi
    sudo $dfubinpath atxmega32a4u flash $dockhexpath
fi
    newline
    success "Dock Firmware Update completed"
    warning "Please unplug/replug your Flotilla Dock before use!"
    newline

exit 0
